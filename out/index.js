'use strict';Object.defineProperty(exports,'__esModule',{value:true});var HTTPClientContentTypesEnum;(function(HTTPClientContentTypesEnum){HTTPClientContentTypesEnum['json']='json';HTTPClientContentTypesEnum['html']='html';HTTPClientContentTypesEnum['text']='text';HTTPClientContentTypesEnum['form']='form';}(HTTPClientContentTypesEnum=exports.HTTPClientContentTypesEnum||(exports.HTTPClientContentTypesEnum={})));class HTTPClient{static getTransport(){return new window['XMLHttpRequest']();}static makeRequest(url,method,payload,query={},headers={},responseType='json'){const formattedHeaders=JSON.parse(JSON.stringify(headers));if(formattedHeaders['Content-Type']&&this.contentTypes[formattedHeaders['Content-Type']]){formattedHeaders['Content-Type']=this.contentTypes[formattedHeaders['Content-Type']];}return new Promise((resolve,reject)=>{const request=this.getTransport();const params=new URLSearchParams();Object.keys(query||{}).forEach(key=>params.append(key,query[key]));request.open(method.toUpperCase(),`${url}${query&&Object.keys(query).length?`?${params}`:''}`);Object.keys(formattedHeaders||{}).forEach(key=>request.setRequestHeader(key,formattedHeaders[key]));request.responseType=responseType;request.send(payload);request.onreadystatechange=()=>{if(request.readyState!==4){return;}if(request.status>=400){reject(request);}else{resolve(request.response);}};});}static get(url,payload=null,query={},noCache=true,contentType=HTTPClientContentTypesEnum.json){let requestBody=payload;if(noCache){query._=Date.now().toString();}if(contentType==='json'){try{requestBody=JSON.stringify(payload);}catch(e){return Promise.reject({error:'Invalid request payload'});}}return this.makeRequest(url,'get',requestBody,query,{'Content-Type':contentType});}static post(url,payload=null,query={},noCache=true,contentType=HTTPClientContentTypesEnum.json){let requestBody=payload;if(noCache){query._=Date.now().toString();}if(contentType==='json'){try{requestBody=JSON.stringify(payload);}catch(e){return Promise.reject({error:'Invalid request payload'});}}return this.makeRequest(url,'post',requestBody,query,{'Content-Type':contentType});}static put(url,payload=null,query={},noCache=true,contentType=HTTPClientContentTypesEnum.json){let requestBody=payload;if(noCache){query._=Date.now().toString();}if(contentType==='json'){try{requestBody=JSON.stringify(payload);}catch(e){return Promise.reject({error:'Invalid request payload'});}}return this.makeRequest(url,'put',requestBody,query,{'Content-Type':contentType});}}exports.HTTPClient=HTTPClient;HTTPClient.contentTypes={[HTTPClientContentTypesEnum.json]:'application/json; charset=UTF-8',[HTTPClientContentTypesEnum.html]:'text/html; charset=utf-8',[HTTPClientContentTypesEnum.text]:'text/plain; charset=utf-8',[HTTPClientContentTypesEnum.form]:'multipart/form-data; charset=utf-8'};