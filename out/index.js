'use strict';var _a;Object.defineProperty(exports,'__esModule',{value:true});var HTTPClientContentTypesEnum;(function(HTTPClientContentTypesEnum){HTTPClientContentTypesEnum['json']='json';HTTPClientContentTypesEnum['html']='html';HTTPClientContentTypesEnum['text']='text';HTTPClientContentTypesEnum['form']='form';}(HTTPClientContentTypesEnum=exports.HTTPClientContentTypesEnum||(exports.HTTPClientContentTypesEnum={})));var HTTPClient=function(){function HTTPClient(){}HTTPClient.getTransport=function(){return new window['XMLHttpRequest']();};HTTPClient.makeRequest=function(url,method,payload,query,headers,responseType){var _this=this;if(query===void 0){query={};}if(headers===void 0){headers={};}if(responseType===void 0){responseType='json';}var formattedHeaders=JSON.parse(JSON.stringify(headers));if(formattedHeaders['Content-Type']&&this.contentTypes[formattedHeaders['Content-Type']]){formattedHeaders['Content-Type']=this.contentTypes[formattedHeaders['Content-Type']];}return new Promise(function(resolve,reject){var request=_this.getTransport();var params=new URLSearchParams();Object.keys(query||{}).forEach(function(key){return params.append(key,query[key]);});request.open(method.toUpperCase(),''+url+(query&&Object.keys(query).length?'?'+params:''));Object.keys(formattedHeaders||{}).forEach(function(key){return request.setRequestHeader(key,formattedHeaders[key]);});request.responseType=responseType;request.send(payload);request.onreadystatechange=function(){if(request.readyState!==4){return;}if(request.status>=400){reject(request);}else{resolve(request.response);}};});};HTTPClient.get=function(url,payload,query,noCache,contentType){if(payload===void 0){payload=null;}if(query===void 0){query={};}if(noCache===void 0){noCache=true;}if(contentType===void 0){contentType=HTTPClientContentTypesEnum.json;}var requestBody=payload;if(noCache){query._=Date.now().toString();}if(contentType==='json'){try{requestBody=JSON.stringify(payload);}catch(e){return Promise.reject({error:'Invalid request payload'});}}return this.makeRequest(url,'get',requestBody,query,{'Content-Type':contentType});};HTTPClient.post=function(url,payload,query,noCache,contentType){if(payload===void 0){payload=null;}if(query===void 0){query={};}if(noCache===void 0){noCache=true;}if(contentType===void 0){contentType=HTTPClientContentTypesEnum.json;}var requestBody=payload;if(noCache){query._=Date.now().toString();}if(contentType==='json'){try{requestBody=JSON.stringify(payload);}catch(e){return Promise.reject({error:'Invalid request payload'});}}return this.makeRequest(url,'post',requestBody,query,{'Content-Type':contentType});};HTTPClient.put=function(url,payload,query,noCache,contentType){if(payload===void 0){payload=null;}if(query===void 0){query={};}if(noCache===void 0){noCache=true;}if(contentType===void 0){contentType=HTTPClientContentTypesEnum.json;}var requestBody=payload;if(noCache){query._=Date.now().toString();}if(contentType==='json'){try{requestBody=JSON.stringify(payload);}catch(e){return Promise.reject({error:'Invalid request payload'});}}return this.makeRequest(url,'put',requestBody,query,{'Content-Type':contentType});};HTTPClient.contentTypes=(_a={},_a[HTTPClientContentTypesEnum.json]='application/json; charset=UTF-8',_a[HTTPClientContentTypesEnum.html]='text/html; charset=utf-8',_a[HTTPClientContentTypesEnum.text]='text/plain; charset=utf-8',_a[HTTPClientContentTypesEnum.form]='multipart/form-data; charset=utf-8',_a);return HTTPClient;}();exports.HTTPClient=HTTPClient;