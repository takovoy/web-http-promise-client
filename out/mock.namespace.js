'use strict';Object.defineProperty(exports,'__esModule',{value:true});var MockNamespace;(function(MockNamespace){var MockContextCaller=function(){function MockContextCaller(methodName){this.methodName=methodName;this.counter=0;this.callsArgumentsList=[];}MockContextCaller.prototype.getCallsCount=function(){return this.counter;};MockContextCaller.prototype.getArguments=function(callIndex){return this.callsArgumentsList[callIndex];};MockContextCaller.prototype.getAllArguments=function(){return this.callsArgumentsList;};MockContextCaller.prototype.increase=function(args){this.callsArgumentsList[this.counter]=args;this.counter=this.counter+1;};return MockContextCaller;}();MockNamespace.MockContextCaller=MockContextCaller;var MockContext=function(){function MockContext(){this.calls=[];this.instances=[];}MockContext.prototype.call=function(methodName,args){var call=this.calls.find(function(caller){return caller.methodName===methodName;});if(!call){call=new MockContextCaller(methodName);this.calls.push(call);}call.increase(args);};MockContext.prototype.getMethodCalls=function(methodName){return this.calls.find(function(caller){return caller.methodName===methodName;});};MockContext.prototype.getAllCalls=function(methodName){return this.calls;};MockContext.prototype.addInstance=function(instance){this.instances.push(instance);};MockContext.prototype.getInstances=function(){return this.instances;};MockContext.prototype.clear=function(){this.calls=[];this.instances=[];};return MockContext;}();MockNamespace.MockContext=MockContext;}(MockNamespace=exports.MockNamespace||(exports.MockNamespace={})));